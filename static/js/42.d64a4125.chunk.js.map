{"version":3,"file":"static/js/42.d64a4125.chunk.js","mappings":"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","sources":["组件/CycleSelect/index.tsx","功能模块/系统工具/页面右下角工具/网页工具/循环设置/导入循环/index.tsx","功能模块/系统工具/页面右下角工具/网页工具/循环设置/index.tsx"],"sourcesContent":["import { useAppSelector } from '@/hooks'\nimport useCycle from '@/hooks/use-cycle'\nimport { PlusOutlined } from '@ant-design/icons'\nimport { Button, Divider, Input, message, Select } from 'antd'\nimport { useEffect, useState } from 'react'\nimport './index.css'\n\nconst CycleSelect = ({ 循环标识, 设置循环标识 }) => {\n  const { 全部循环 = [] } = useCycle()\n  const [新建循环标识, 设置新建循环标识] = useState<string>()\n  const 自定义循环列表 = useAppSelector((state) => state?.data?.自定义循环列表)\n  const [可选循环列表, 设置可选循环列表] = useState<string[]>([])\n\n  useEffect(() => {\n    设置可选循环列表(自定义循环列表?.map((item) => item?.名称))\n  }, [自定义循环列表])\n\n  const 新增循环 = () => {\n    if (!新建循环标识) {\n      message.error('请输入循环唯一标识')\n      return\n    }\n    if (全部循环?.some((item) => item?.名称 === 新建循环标识)) {\n      message.error('和已存在循环唯一标识冲突，请更换标识')\n      return\n    }\n    if (可选循环列表?.includes(新建循环标识)) {\n      message.error('和已存在循环唯一标识冲突，请更换标识')\n      return\n    }\n    设置可选循环列表([...可选循环列表, 新建循环标识])\n    设置新建循环标识(undefined)\n  }\n\n  return (\n    <Select\n      style={{ width: '100%' }}\n      value={循环标识}\n      onChange={设置循环标识}\n      optionLabelProp='label'\n      placeholder={'请选择你要覆盖的循环'}\n      options={可选循环列表.map((item) => ({ label: item, value: item }))}\n      dropdownRender={(menu) => (\n        <>\n          {menu}\n          <Divider style={{ margin: '8px 0' }} />\n          <div className='cycle-select-add-input-wrap'>\n            <Input\n              placeholder='请输入循环标识'\n              value={新建循环标识}\n              onChange={(e) => 设置新建循环标识(e?.target?.value)}\n              onKeyDown={(e) => e.stopPropagation()}\n              onPressEnter={() => 新增循环()}\n            />\n            <Button type='text' icon={<PlusOutlined />} onClick={新增循环}>\n              创建新循环\n            </Button>\n          </div>\n        </>\n      )}\n    />\n  )\n}\n\nexport default CycleSelect\n","import React, { useState } from 'react'\nimport { Alert, message, Modal, ModalProps, Spin, Upload } from 'antd'\nimport { InboxOutlined } from '@ant-design/icons'\nimport { useAppDispatch, useAppSelector } from '@/hooks'\nimport { 循环数据 } from '@/@types/循环'\nimport { 更新当前自定义循环列表 } from '@/store/data'\nimport './index.css'\nimport CycleSelect from '@/组件/CycleSelect'\n\nconst { Dragger } = Upload\n\ninterface 导入弹窗类型 extends ModalProps {\n  a?: string\n}\n\nconst 导入弹窗: React.FC<导入弹窗类型> = (props) => {\n  const { open, onCancel } = props\n  const [loading, setLoading] = useState<boolean>(false)\n  const [导入数据, 设置导入数据] = useState<循环数据>()\n  const [循环标识, 设置循环标识] = useState<string>()\n  const dispatch = useAppDispatch()\n\n  const 自定义循环列表 = useAppSelector((state) => state?.data?.自定义循环列表)\n\n  const handleFileChange = (e) => {\n    const file = e\n    const reader = new FileReader()\n    setLoading(true)\n    reader.readAsText(file)\n    reader.onload = () => {\n      if (reader.result) {\n        try {\n          const data = JSON.parse(reader.result as any)\n          if (data?.名称) {\n            设置导入数据(data as any)\n          } else {\n            message.error('导入失败，请检查文件格式')\n          }\n        } catch (e) {\n          message.error('导入失败，请检查文件格式')\n        }\n      }\n      setLoading(false)\n    }\n  }\n\n  const 导入循环数据 = (e) => {\n    if (!循环标识) {\n      message.error('请选择/输入循环标识')\n      return\n    }\n    if (!导入数据) {\n      message.error('请导入文件')\n      return\n    }\n    const 新自定义循环 = 自定义循环列表?.some((item) => item?.名称 === 循环标识)\n      ? 自定义循环列表.map((item) => {\n          return item.名称 === 循环标识 ? 导入数据 : item\n        })\n      : (自定义循环列表 || []).concat([导入数据])\n\n    dispatch(更新当前自定义循环列表(新自定义循环))\n    message.success('导入成功')\n    onCancel?.(e as any)\n  }\n\n  return (\n    <Modal open={open} onCancel={onCancel} title='导入循环' onOk={导入循环数据}>\n      <Spin spinning={loading} tip='解析中'>\n        <div className='cycle-setting-import-select-wrap'>\n          <CycleSelect 循环标识={循环标识} 设置循环标识={设置循环标识} />\n        </div>\n        {导入数据?.名称 ? (\n          <div className={'cycle-setting-import-res'}>\n            <Alert\n              type='success'\n              message={`识别循环：${导入数据?.名称}`}\n              closable\n              afterClose={() => 设置导入数据(undefined)}\n            />\n          </div>\n        ) : (\n          <div>\n            <Dragger\n              name='file'\n              fileList={[]}\n              beforeUpload={(file) => {\n                handleFileChange(file)\n              }}\n              className={'tools-daoru-dragger'}\n            >\n              <p className='ant-upload-drag-icon'>\n                <InboxOutlined />\n              </p>\n              <p className='ant-upload-text'>点击上传或拖拽上传循环JSON文件</p>\n            </Dragger>\n          </div>\n        )}\n      </Spin>\n    </Modal>\n  )\n}\n\nexport default 导入弹窗\n","import React, { useEffect, useState } from 'react'\nimport { App, Button, message, Table } from 'antd'\nimport { useAppDispatch, useAppSelector } from '@/hooks'\nimport 获取当前数据 from '@/数据/数据工具/获取当前数据'\nimport useCycle from '@/hooks/use-cycle'\nimport { 更新当前自定义循环列表 } from '@/store/data'\nimport 导入弹窗 from './导入循环'\n// import { 循环数据 } from '@/@types/循环'\n// import 循环详情弹窗 from './循环详情弹窗'\nimport './index.css'\n\nconst { 缓存映射 } = 获取当前数据()\n\nfunction 循环设置() {\n  const { modal } = App.useApp()\n  const { 全部循环 = [] } = useCycle()\n  const [导入弹窗设置, 设置导入弹窗设置] = useState<boolean>(false)\n  // const [循环详情弹窗设置, 设置循环详情弹窗设置] = useState<{ open: boolean; 数据?: 循环数据 }>({\n  //   open: false,\n  // })\n  const 自定义循环列表 = useAppSelector((state) => state?.data?.自定义循环列表)\n  const dispatch = useAppDispatch()\n\n  const 导出循环 = (data) => {\n    const element = document.createElement('a')\n    element.setAttribute(\n      'href',\n      'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(data))\n    )\n    element.setAttribute('download', '计算器数据迁移.json')\n    element.style.display = 'none'\n    document.body.appendChild(element)\n    element.click()\n    document.body.removeChild(element)\n    message.success('循环已导出')\n  }\n\n  const 删除循环 = (循环数据) => {\n    modal.confirm({\n      title: `确定要删除循环${循环数据?.名称}吗？`,\n      content: '删除后将无法恢复',\n      onOk() {\n        const 新自定义循环 = 自定义循环列表?.filter((item) => item?.名称 !== 循环数据?.名称)\n        dispatch(更新当前自定义循环列表(新自定义循环))\n        message.success('删除成功')\n      },\n    })\n  }\n\n  useEffect(() => {\n    // redux变动，更新storage信息\n    const 保存信息 = {}\n    ;(自定义循环列表 || []).forEach((item) => {\n      保存信息[item.名称] = {\n        ...item,\n      }\n    })\n    localStorage?.setItem(缓存映射.自定义循环, JSON.stringify(保存信息))\n  }, [自定义循环列表])\n\n  return (\n    <div>\n      <div className='cycle-setting-btns'>\n        {/* <Button\n          className='cycle-setting-btn'\n          type='primary'\n          onClick={() => 设置循环详情弹窗设置({ open: true })}\n        >\n          新建循环\n        </Button> */}\n        <Button type='primary' className='cycle-setting-btn' onClick={() => 设置导入弹窗设置(true)}>\n          导入循环\n        </Button>\n      </div>\n      <导入弹窗 open={导入弹窗设置} onCancel={() => 设置导入弹窗设置(false)} />\n      {/* <循环详情弹窗\n        open={循环详情弹窗设置?.open}\n        数据={循环详情弹窗设置?.数据}\n        onCancel={() => 设置循环详情弹窗设置({ open: false })}\n      /> */}\n      <Table\n        dataSource={全部循环}\n        size='small'\n        pagination={false}\n        scroll={{ y: 500 }}\n        columns={[\n          {\n            title: '唯一标识',\n            dataIndex: '名称',\n          },\n          {\n            title: '循环标题',\n            dataIndex: '标题',\n            render: (_, row) => {\n              return row?.标题 || row?.名称\n            },\n          },\n          {\n            title: '提供者',\n            dataIndex: '提供者',\n          },\n          {\n            title: '类型',\n            dataIndex: '类型',\n            width: 80,\n          },\n          {\n            title: '标记',\n            dataIndex: '标记',\n            width: 80,\n          },\n          {\n            title: '操作',\n            dataIndex: '操作',\n            render: (_, row) => {\n              const 允许操作 = 自定义循环列表?.some((item) => item?.名称 === row?.名称)\n              return (\n                <div className='cycle-setting-list-btns'>\n                  <Button size='small' type='link' onClick={() => 导出循环(row)}>\n                    导出\n                  </Button>\n                  {允许操作 ? (\n                    <>\n                      {/* <Button\n                        size='small'\n                        type='link'\n                        onClick={() => 设置循环详情弹窗设置({ open: true, 数据: row })}\n                      >\n                        编辑\n                      </Button> */}\n                      <Button size='small' type='link' danger onClick={() => 删除循环(row)}>\n                        删除\n                      </Button>\n                    </>\n                  ) : null}\n                </div>\n              )\n            },\n          },\n        ]}\n      />\n    </div>\n  )\n}\n\nexport default 循环设置\n"],"names":["_ref","循环标识","设置循环标识","全部循环","useCycle","新建循环标识","设置新建循环标识","useState","自定义循环列表","useAppSelector","state","_state$data","data","可选循环列表","设置可选循环列表","useEffect","map","item","名称","新增循环","some","includes","message","error","undefined","_jsx","Select","style","width","value","onChange","optionLabelProp","placeholder","options","label","dropdownRender","menu","_jsxs","_Fragment","children","Divider","margin","className","Input","e","_e$target","target","onKeyDown","stopPropagation","onPressEnter","Button","type","icon","PlusOutlined","onClick","Dragger","Upload","props","open","onCancel","loading","setLoading","导入数据","设置导入数据","dispatch","useAppDispatch","Modal","title","onOk","新自定义循环","concat","更新当前自定义循环列表","success","Spin","spinning","tip","CycleSelect","Alert","closable","afterClose","name","fileList","beforeUpload","file","reader","FileReader","readAsText","onload","result","JSON","parse","handleFileChange","InboxOutlined","缓存映射","获取当前数据","modal","App","useApp","导入弹窗设置","设置导入弹窗设置","_localStorage","保存信息","forEach","localStorage","setItem","自定义循环","stringify","导入弹窗","Table","dataSource","size","pagination","scroll","y","columns","dataIndex","render","_","row","标题","允许操作","element","document","createElement","setAttribute","encodeURIComponent","display","body","appendChild","click","removeChild","导出循环","danger","删除循环","循环数据","confirm","content","filter"],"sourceRoot":""}