{"version":3,"file":"static/js/822.137f3fa9.chunk.js","mappings":"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","sources":["功能模块/系统工具/页面右下角工具/网页工具/触发率分析/Calculator.ts","功能模块/系统工具/页面右下角工具/网页工具/触发率分析/eventChart.tsx","功能模块/系统工具/页面右下角工具/网页工具/触发率分析/index.tsx"],"sourcesContent":["import kungfu2mask from './kungfu2mask.json'\nimport skill2mask from './skill2mask.json'\nimport kungfu2prob from './kungfu2prob.json'\n\ntype KungfuMask = [number, number]\ntype Probabilities = { [key: string]: { [key: number]: number } }\ntype Counts = { [key: string]: { [key: number]: number } }\ntype Records = Array<[number, string[]]>\n\nclass Calculator {\n  private kungfu2mask: { [key: string]: { [key: string]: KungfuMask } }\n  private skill2mask: { [key: string]: KungfuMask }\n  private kungfu2prob: { [key: string]: { [key: string]: number } }\n\n  private id2kungfu: { [key: string]: string } = {}\n  private id2name: { [key: string]: string } = {}\n  private rows: string[] = []\n  private records: Records = []\n  private counts: Counts = {}\n  private probs: Probabilities = {}\n  private duration = 96\n  private interval = 0\n\n  constructor() {\n    this.kungfu2mask = JSON.parse(JSON.stringify(kungfu2mask))\n    this.skill2mask = JSON.parse(JSON.stringify(skill2mask))\n    this.kungfu2prob = JSON.parse(JSON.stringify(kungfu2prob))\n\n    this.reset([])\n  }\n\n  private reset(rows: string[]): void {\n    this.rows = rows\n    this.id2kungfu = {}\n    this.id2name = {}\n    this.records = []\n    this.counts = {}\n    this.probs = {}\n  }\n\n  private prepare(): void {\n    for (const row of this.rows) {\n      const columns = row.split('\\t')\n      if (columns[4] === '4') {\n        const details = columns[columns.length - 1].trim().slice(1, -1).split(',')\n        const player_id = details[0]\n        const player_name = details[1]\n        const kungfu_id = details[3]\n        this.id2kungfu[player_id] = kungfu_id\n        this.id2name[player_id] = player_name\n        this.counts[player_id] = {}\n      } else if (columns[4] === '21') {\n        const details = columns[columns.length - 1].trim().slice(1, -1).split(',')\n        this.records.push([parseInt(columns[1]), details])\n      }\n    }\n  }\n\n  private parse(tag: number): void {\n    for (const [frame, details] of this.records) {\n      const player_id = details[0]\n      if (!(player_id in this.id2kungfu)) {\n        continue\n      }\n      const react = details[2]\n      const damage_type = details[3]\n      if (react === '1' || damage_type === '2') {\n        continue\n      }\n\n      const skill_id = details[4]\n      const [skill_mask_1, skill_mask_2] = this.skill2mask[skill_id] || [0, 0]\n      const [event_mask_1, event_mask_2] = this.kungfu2mask[this.id2kungfu[player_id]][tag]\n\n      if (skill_mask_1 & event_mask_1 || skill_mask_2 & event_mask_2) {\n        if (!(frame in this.counts[player_id])) {\n          this.counts[player_id][frame] = 0\n        }\n        this.counts[player_id][frame] += 1\n      }\n    }\n  }\n\n  private calculate(tag: number): void {\n    for (const player_id in this.counts) {\n      const player_name = this.id2name[player_id]\n      const counts = this.counts[player_id]\n      const probs = (this.probs[player_name] = {})\n      for (const frame in counts) {\n        probs[frame] = 0\n      }\n      const event_prob = this.kungfu2prob[this.id2kungfu[player_id]][tag] / 1024\n      for (const frame in counts) {\n        const count = counts[frame]\n        if (count === 0) {\n          continue\n        }\n        probs[frame] += event_prob * count\n      }\n    }\n  }\n\n  private calculateOverlap(tag: number): void {\n    for (const player_id in this.counts) {\n      const player_name = this.id2name[player_id]\n      const counts = this.counts[player_id]\n      const probs = (this.probs[player_name] = {})\n      for (const frame in counts) {\n        probs[frame] = 0\n      }\n      const event_prob = this.kungfu2prob[this.id2kungfu[player_id]][tag] / 1024\n      for (const frame in counts) {\n        const count = counts[frame]\n        if (count === 0) {\n          continue\n        }\n        const prob = 1 - Math.pow(1 - event_prob, count)\n        for (let i = +frame; i < +frame + this.duration; i++) {\n          if (!(i in probs)) {\n            continue\n          }\n          probs[i] += (1 - probs[i]) * prob\n        }\n      }\n    }\n  }\n\n  private calculateInterval(tag: number): void {\n    for (const player_id in this.counts) {\n      const player_name = this.id2name[player_id]\n      const counts = this.counts[player_id]\n      const probs = (this.probs[player_name] = {})\n      for (const frame in counts) {\n        probs[frame] = 1\n      }\n      const event_prob = this.kungfu2prob[this.id2kungfu[player_id]][tag] / 1024\n      for (const frame in counts) {\n        const count = counts[frame]\n        if (count === 0) {\n          continue\n        }\n        const prob = 1 - Math.pow(1 - event_prob, count)\n        probs[frame] *= prob\n        for (let i = +frame; i < +frame + this.interval; i++) {\n          if (i === +frame || !(i in probs)) {\n            continue\n          }\n          probs[i] *= 1 - probs[frame]\n        }\n      }\n    }\n  }\n\n  private calculateHybrid(tag: number): void {\n    this.calculateInterval(tag)\n    for (const player_name in this.probs) {\n      const probs = this.probs[player_name]\n      const final_probs: { [key: number]: number } = {}\n      for (const frame in probs) {\n        final_probs[frame] = 0\n      }\n      for (const frame in probs) {\n        const prob = probs[frame]\n        if (prob === 0) {\n          continue\n        }\n        for (let i = +frame; i < +frame + this.duration; i++) {\n          if (!(i in final_probs)) {\n            continue\n          }\n          final_probs[i] += (1 - final_probs[i]) * prob\n        }\n      }\n      this.probs[player_name] = final_probs\n    }\n  }\n\n  public call(fileData: string[], tag: number, interval): Probabilities {\n    this.reset(fileData)\n    this.prepare()\n    this.parse(tag)\n    if (tag === 0) {\n      this.duration = 6 * 16\n      this.calculateOverlap(tag)\n    } else if (tag === 1) {\n      this.interval = (interval || 40) * 16\n      this.calculateInterval(tag)\n    } else if (tag === 2) {\n      this.calculate(tag)\n    } else if (tag === 3) {\n      this.duration = 8 * 16\n      this.interval = (interval || 30) * 16\n      this.calculateHybrid(tag)\n    } else if (tag === 4) {\n      this.interval = (interval || 10) * 16\n      this.calculateInterval(tag)\n    }\n\n    return this.probs\n  }\n}\n\nexport default Calculator\n","import 获取当前数据 from '@/数据/数据工具/获取当前数据'\nimport React, { useEffect, useRef, useState } from 'react'\nimport * as G2 from '@antv/g2'\nimport './index.css'\n\ninterface 图表展示类型 {\n  当前查看人: string\n  data: { [key: number]: number }\n}\n\nconst { 系统配置 } = 获取当前数据()\n\nconst 图表展示: React.FC<图表展示类型> = (props) => {\n  const { data, 当前查看人 } = props\n  const id = `${当前查看人}_event_chart`\n  const [chartData, setChartData] = useState<any>()\n\n  const limitRef: any = useRef<any>()\n\n  useEffect(() => {\n    limitRef.current = false\n    initChart()\n    return () => {\n      limitRef.current = false\n    }\n  }, [])\n\n  // 处理缺少的帧数数据\n  const 处理图表数据 = (data) => {\n    if (!data) {\n      return []\n    }\n    const result: any[] = []\n    const key数据 = Object.keys(data) || []\n    const 初始帧数: any = +key数据?.[0] || 0\n    const 最终帧数: any = +key数据?.[key数据.length - 1] || 0\n    const 总执行时间 = 最终帧数 - 初始帧数\n    for (let i = 0; i < 总执行时间; i++) {\n      if (data[初始帧数 + i]) {\n        result.push({\n          帧: i,\n          触发率: data[初始帧数 + i],\n        })\n      }\n    }\n\n    return result\n  }\n\n  const initChart = () => {\n    if (limitRef.current) {\n      return\n    }\n    limitRef.current = true\n\n    const chart = chartData\n      ? chartData\n      : new G2.Chart({\n          container: id,\n          autoFit: true,\n          renderer: 'canvas',\n          padding: [20, 40, 20, 40],\n        })\n\n    if (!chartData) {\n      setChartData(chart)\n    }\n\n    const dataSource = 处理图表数据(data)\n\n    chart.clear()\n\n    // chart.axis('触发率', false)\n    chart.line().position('帧*触发率').size(3).color(系统配置?.主题色)\n\n    chart.data(dataSource)\n    chart.render()\n\n    setTimeout(() => {\n      limitRef.current = false\n    }, 10)\n  }\n\n  return <div id={id} className='tools-event-chart-wrap' />\n}\n\nexport default React.memo(图表展示)\n","import React, { useMemo, useState } from 'react'\nimport { Button, message, Select, Slider, Spin, Upload } from 'antd'\nimport { InboxOutlined } from '@ant-design/icons'\nimport Calculator from './Calculator'\nimport 图表展示 from './eventChart'\n\nimport './index.css'\nimport { 按数字生成数组 } from '@/工具函数/help'\n\nconst { Dragger } = Upload\n\nfunction 触发率分析() {\n  const [loading, setLoading] = useState<boolean>(false)\n  const [文件内容, 设置文件内容] = useState<string[]>()\n  const [shuju, setShuju] = useState<{ [key: string]: { [key: number]: number } }>()\n  const [当前查看人, 设置当前查看人] = useState<string>()\n  const [时间范围, 设置时间范围] = useState<number[]>()\n  const [触发类型, 设置触发类型] = useState<number>(0)\n  const [内置CD, 设置内置CD] = useState<number>(30)\n\n  const [原始时间范围, 设置原始时间范围] = useState<number[]>()\n\n  const handleFileChange = (e) => {\n    const file = e\n    const reader: any = new FileReader()\n    reader.readAsText(file, 'gbk')\n    reader.onload = () => {\n      if (reader.result) {\n        const list = reader?.result?.split('\\n')\n        if (list.length > 0) {\n          setLoading(true)\n          设置文件内容(list)\n          更新图表(list, 触发类型, 内置CD)\n          setLoading(false)\n        } else {\n          message.error('解析错误，请检查文件')\n        }\n      }\n    }\n  }\n\n  const 更新图表 = (传入文件内容, 传入触发类型, 传入内置CD) => {\n    if (传入文件内容?.length) {\n      const calculator = new Calculator()\n      const res = calculator.call(传入文件内容, 传入触发类型, 传入内置CD)\n      setShuju(res as any)\n      设置当前查看人(Object.keys(res)[0])\n      const 第一个人的数据: any = Object.keys(Object.values(res)[0] as any)\n      if (第一个人的数据?.length) {\n        const 第一帧 = 第一个人的数据?.[0]\n        const 最后一帧 = 第一个人的数据?.[第一个人的数据?.length - 1]\n        const 总时间 = Math.floor((最后一帧 - 第一帧) / 16)\n        设置时间范围([0, 总时间])\n        设置原始时间范围([0, 总时间])\n      }\n    }\n  }\n\n  const 均值 = useMemo(() => {\n    if (当前查看人 && [0, 3]?.includes(触发类型)) {\n      const 当前数据 = shuju?.[当前查看人]\n      if (当前数据 && Object.keys(当前数据)?.length) {\n        const 计算数据 = JSON.parse(JSON.stringify(当前数据))\n        if (时间范围?.length) {\n          const start = 时间范围[0] * 16 + (+Object.keys(当前数据)[0] || 0)\n          const end = 时间范围[1] * 16 + (+Object.keys(当前数据)[0] || 0)\n          Object.keys(当前数据).forEach((key) => {\n            if (+key < start || +key > end) {\n              delete 计算数据[key]\n            }\n          })\n        }\n\n        const arr: any[] = Object.values(计算数据)\n        let sum = 0\n        for (let i = 0; i < arr.length; i++) {\n          sum += arr[i]\n        }\n\n        return sum / arr.length\n      } else {\n        return 0\n      }\n    } else {\n      return undefined\n    }\n  }, [shuju, 当前查看人, 时间范围, 触发类型])\n\n  const 求和 = useMemo(() => {\n    if (当前查看人 && [1, 2, 4]?.includes(触发类型)) {\n      const 当前数据 = shuju?.[当前查看人]\n      if (当前数据 && Object.keys(当前数据)?.length) {\n        const 计算数据 = JSON.parse(JSON.stringify(当前数据))\n        let 总时间 = 0\n        if (时间范围?.length) {\n          const start = 时间范围[0] * 16 + (+Object.keys(当前数据)[0] || 0)\n          const end = 时间范围[1] * 16 + (+Object.keys(当前数据)[0] || 0)\n          总时间 = end - start\n          Object.keys(当前数据).forEach((key) => {\n            if (+key < start || +key > end) {\n              delete 计算数据[key]\n            }\n          })\n        }\n\n        const arr: any[] = Object.values(计算数据)\n        let sum = 0\n        for (let i = 0; i < arr.length; i++) {\n          sum += arr[i]\n        }\n\n        // 1.计算出t秒内的时间触发率之和n\n        // 2.每秒的触发率f=n/t\n        // 3.则平均interval=1/f+cd秒触发一次橙武特效\n        // 4.平均触发次数=t/interval\n\n        const 总秒数 = 总时间 / 16\n        console.log('总秒数', 总秒数)\n        const 每秒触发率 = sum / 总秒数\n        console.log('每秒触发率', 每秒触发率)\n        const 平均Interval = 1 / 每秒触发率 + 内置CD\n        console.log('平均Interval', 平均Interval)\n        const 期望触发次数 = 总秒数 / 平均Interval\n        console.log('期望触发次数', 期望触发次数)\n\n        return sum\n      } else {\n        return 0\n      }\n    } else {\n      return undefined\n    }\n  }, [shuju, 当前查看人, 时间范围])\n\n  return (\n    <Spin spinning={loading} tip='解析中'>\n      <div className='tools-event-chart-title'>\n        <Select\n          value={触发类型}\n          className='tools-event-chart-select'\n          onChange={(e) => {\n            let 更新内置CD = 40\n            设置触发类型(e)\n            if (e === 1) {\n              更新内置CD = 30\n            } else if (e === 3) {\n              更新内置CD = 30\n            } else if (e === 4) {\n              更新内置CD = 10\n            }\n            设置内置CD(更新内置CD)\n            更新图表(文件内容, e, 更新内置CD)\n          }}\n        >\n          <Select.Option key={'双会套装概率'} value={0}>\n            门派套装双会\n          </Select.Option>\n          <Select.Option key={'橙武特效'} value={1}>\n            橙武特效\n          </Select.Option>\n          <Select.Option key={'橙武子技能'} value={2}>\n            橙武子技能\n          </Select.Option>\n          {/* <Select.Option key={'大附魔·腰'} value={3}>\n            大附魔·腰\n          </Select.Option> */}\n          <Select.Option key={'大附魔·手'} value={4}>\n            大附魔·手\n          </Select.Option>\n        </Select>\n        {[1, 3, 4]?.includes(触发类型) ? (\n          <Select\n            value={内置CD}\n            className='tools-event-chart-select'\n            onChange={(e) => {\n              设置内置CD(e)\n              更新图表(文件内容, 触发类型, e)\n            }}\n            showSearch\n          >\n            {按数字生成数组(80)\n              ?.filter((item) => item >= 10)\n              .map((item) => {\n                return (\n                  <Select.Option key={`内置CD${item}`} value={item}>\n                    {`内置CD ${item}秒`}\n                  </Select.Option>\n                )\n              })}\n          </Select>\n        ) : null}\n        {shuju ? (\n          <Select\n            className='tools-event-chart-select'\n            value={当前查看人}\n            placeholder='请选择查看人'\n            allowClear\n            onChange={(e) => {\n              设置当前查看人(e)\n            }}\n          >\n            {Object.keys(shuju).map((item) => {\n              return (\n                <Select.Option key={item} value={item}>\n                  {item?.replaceAll(`\"`, '')}\n                </Select.Option>\n              )\n            })}\n          </Select>\n        ) : null}\n      </div>\n      <div>\n        {文件内容 ? (\n          <div>\n            <div className='tools-event-chart-title'>\n              <Button\n                danger\n                onClick={() => {\n                  setShuju(undefined)\n                  设置文件内容(undefined)\n                  设置当前查看人(undefined)\n                  设置时间范围(undefined)\n                  设置原始时间范围(undefined)\n                }}\n              >\n                清空\n              </Button>\n              {均值 !== undefined ? (\n                <span className='tools-event-chart-text '>\n                  均值：\n                  <span className='tools-event-chart-average'>{均值?.toFixed(6)}</span>\n                </span>\n              ) : (\n                ''\n              )}\n              {求和 !== undefined ? (\n                <>\n                  <span className='tools-event-chart-text '>\n                    期望总次数：\n                    <span className='tools-event-chart-average'>{求和?.toFixed(6)}</span>\n                  </span>\n                  {时间范围?.[1] && 时间范围?.[1] > 0 ? (\n                    <span className='tools-event-chart-text '>\n                      分均次：\n                      <span className='tools-event-chart-average'>\n                        {((求和 / 时间范围?.[1]) * 60)?.toFixed(6)}\n                      </span>\n                    </span>\n                  ) : null}\n                </>\n              ) : (\n                ''\n              )}\n              {原始时间范围?.length && 当前查看人 ? (\n                <>\n                  <span className='tools-event-chart-text'>时间范围：</span>\n                  <Slider\n                    value={时间范围}\n                    range\n                    className='tools-event-chart-setting'\n                    onChange={(e) => {\n                      设置时间范围(e)\n                    }}\n                    max={原始时间范围?.[1]}\n                    min={原始时间范围?.[0]}\n                    step={1}\n                    included\n                  />\n                  <span className='tools-event-chart-text'>{时间范围?.[1] || 0}秒</span>\n                </>\n              ) : null}\n            </div>\n            {当前查看人 && shuju ? (\n              <>\n                <图表展示\n                  key={`${当前查看人}${触发类型}${内置CD}`}\n                  当前查看人={当前查看人}\n                  data={shuju?.[当前查看人]}\n                />\n                <p className='tools-event-chart-tip'>\n                  {[2]?.includes(触发类型)\n                    ? '横坐标：帧，纵坐标：该帧对应技能的期望个数'\n                    : [1, 4]?.includes(触发类型)\n                    ? '横坐标：帧，纵坐标：对应buff触发概率'\n                    : '横坐标：帧，纵坐标：有对应buff的概率'}\n                </p>\n              </>\n            ) : null}\n          </div>\n        ) : (\n          <Dragger\n            name='file'\n            fileList={[]}\n            beforeUpload={(file) => {\n              handleFileChange(file)\n            }}\n            className={'tools-chufalv-dragger'}\n          >\n            <p className='ant-upload-drag-icon'>\n              <InboxOutlined />\n            </p>\n            <p className='ant-upload-text'>点击上传JCL文件</p>\n          </Dragger>\n        )}\n      </div>\n    </Spin>\n  )\n}\n\nexport default 触发率分析\n"],"names":["Calculator","kungfu2mask","skill2mask","kungfu2prob","id2kungfu","id2name","rows","records","counts","probs","duration","interval","this","JSON","parse","stringify","reset","columns","split","details","length","trim","slice","player_id","player_name","kungfu_id","push","parseInt","tag","frame","react","damage_type","skill_id","skill_mask_1","skill_mask_2","event_mask_1","event_mask_2","event_prob","count","prob","Math","pow","i","calculateInterval","final_probs","fileData","prepare","calculateOverlap","calculate","calculateHybrid","系统配置","获取当前数据","图表展示","props","data","当前查看人","id","useState","chartData","setChartData","limitRef","useRef","useEffect","current","initChart","chart","G2","container","autoFit","renderer","padding","dataSource","result","key数据","Object","keys","初始帧数","总执行时间","帧","触发率","处理图表数据","clear","line","position","size","color","主题色","render","setTimeout","className","React","Dragger","Upload","loading","setLoading","文件内容","设置文件内容","shuju","setShuju","设置当前查看人","时间范围","设置时间范围","触发类型","设置触发类型","内置CD","设置内置CD","原始时间范围","设置原始时间范围","更新图表","传入文件内容","传入触发类型","传入内置CD","res","call","第一个人的数据","values","第一帧","最后一帧","总时间","floor","均值","useMemo","includes","当前数据","计算数据","start","end","forEach","key","arr","sum","求和","总秒数","console","log","每秒触发率","平均Interval","期望触发次数","spinning","tip","value","onChange","e","更新内置CD","showSearch","按数字生成数组","filter","item","map","placeholder","allowClear","replaceAll","danger","onClick","undefined","toFixed","range","max","min","step","included","name","fileList","beforeUpload","file","reader","FileReader","readAsText","onload","list","message","handleFileChange","InboxOutlined"],"sourceRoot":""}