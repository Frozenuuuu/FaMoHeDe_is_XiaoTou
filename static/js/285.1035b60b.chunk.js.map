{"version":3,"file":"static/js/285.1035b60b.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","功能模块/系统工具/页面右下角工具/网页工具/JCL技能序列导入/职业技能映射枚举/index.tsx","功能模块/系统工具/页面右下角工具/网页工具/JCL技能序列导入/worker.ts"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import 周天功 from './周天功.json'\nimport 凌海诀 from './凌海诀.json'\nimport 孤锋诀悟 from './孤锋诀悟.json'\n\nexport const 心法枚举 = {\n  周天功: 周天功,\n  凌海诀: 凌海诀,\n  孤锋诀: 孤锋诀悟,\n}\n","import { 心法枚举 } from './职业技能映射枚举/index'\nimport 心法枚举JSON from '../../../../../数据/静态数据/心法枚举.json'\n\nself.onmessage = (event) => {\n  const { data } = event // 获取传入的数据\n  // 假设我们进行一些复杂的计算\n  const result = JCL技能序列导入(data)\n  self.postMessage(result) // 将结果发送回主线程\n}\n\nexport const JCL技能序列导入 = (原序列: string) => {\n  // 拆分数组\n  const 数组 = 原序列.split('\\n')\n  let 心法Id = ''\n  let 心法映射数据: any\n\n  try {\n    // 第一次遍历，找到心法对应id\n    for (let i = 0; i < 数组.length; i++) {\n      // 根据制表符拆分\n      const logList = 数组[i]?.split('\\t')\n      // 获取事件类型\n      const type: string = logList[4]\n      // 处理心法\n      if (type === '4') {\n        // 获取具体LogData\n        const logData = logList[5]\n        if (logData) {\n          // 根据,拆分 获取技能id\n          const list = logData?.split(',')\n          if (list?.[3]) {\n            心法Id = list?.[3]\n            // 心法Id = '10698'\n            console.info('心法Id', 心法Id)\n            心法映射数据 = 心法枚举?.[心法枚举JSON?.[心法Id]?.name]\n            break\n          }\n        }\n      }\n    }\n\n    console.info('心法Id', 心法Id)\n\n    // 结果数据\n    let res: string[] = []\n\n    console.info('心法映射数据', 心法映射数据)\n    console.info('心法枚举JSON?.[心法Id]?.name', 心法枚举JSON?.[心法Id]?.name)\n\n    if (心法映射数据) {\n      for (let i = 0; i < 数组.length; i++) {\n        // 根据制表符拆分\n        const logList = 数组[i]?.split('\\t')\n        // 获取事件类型\n        const type: string = logList[4]\n\n        const logData = logList[5]\n        if (logData) {\n          const list = logData?.split(',')\n          // 处理伤害类型\n          if (type === '21') {\n            // 获取具体LogData\n            // 根据,拆分 获取技能id\n            if (list?.[4]) {\n              const id = list?.[4]\n              if (心法映射数据?.skills?.[id]) {\n                if (typeof 心法映射数据?.skills?.[id] === 'string') {\n                  res.push(心法映射数据?.skills?.[id])\n                } else {\n                  res = res.concat(心法映射数据?.skills?.[id])\n                }\n              }\n            }\n            // 判断获得Buff\n          } else if (type === '13') {\n            // 根据,拆分 获取技能id\n            if (list?.[4]) {\n              const id = list?.[4]\n              if (心法映射数据?.buff映射技能?.[id]) {\n                // 判断是否为上buff行为\n                const isAdd = !!list?.[5]\n                if (isAdd) {\n                  res.push(心法映射数据?.buff映射技能?.[id])\n                }\n              }\n            }\n            // 判断释放技能，因为只要按宏就可以释放，这里用释放判断，且如果当前res最后一个已经是，则不push\n          } else if (type === '20') {\n            // 根据,拆分 获取技能id\n            if (list?.[1]) {\n              const id = list?.[1]\n              if (心法映射数据?.释放且交验连续技能?.[id]) {\n                const 不可重复技能组 = [\n                  心法映射数据?.释放且交验连续技能?.[id]?.name,\n                  ...(心法映射数据?.释放且交验连续技能?.[id]?.过滤技能 || []),\n                ]\n                if (!不可重复技能组?.includes(res?.[res?.length - 1])) {\n                  res.push(心法映射数据?.释放且交验连续技能?.[id]?.name)\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return res\n  } catch (e) {\n    console.error(e)\n    return []\n  }\n}\n"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_toConsumableArray","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","心法枚举","周天功","凌海诀","孤锋诀","self","onmessage","event","data","result","JCL技能序列导入","postMessage","原序列","心法映射数据","数组","split","心法Id","logList","logData","list","console","info","心法枚举JSON","res","type","id","skills","push","concat","buff映射技能","释放且交验连续技能","不可重复技能组","过滤技能","includes","e","error"],"sourceRoot":""}