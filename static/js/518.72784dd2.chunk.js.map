{"version":3,"file":"static/js/518.72784dd2.chunk.js","mappings":"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","sources":["组件/CycleSelect/index.tsx","功能模块/系统工具/页面右下角工具/网页工具/循环设置/导入循环/index.tsx","功能模块/系统工具/页面右下角工具/网页工具/循环设置/index.tsx"],"sourcesContent":["import { useAppSelector } from '@/hooks'\nimport useCycle from '@/hooks/use-cycle'\nimport { PlusOutlined } from '@ant-design/icons'\nimport { Button, Divider, Input, message, Select } from 'antd'\nimport { useEffect, useState } from 'react'\nimport './index.css'\n\nconst CycleSelect = ({ 循环标识, 设置循环标识 }) => {\n  const { 全部循环 = [] } = useCycle()\n  const [新建循环标识, 设置新建循环标识] = useState<string>()\n  const 自定义循环列表 = useAppSelector((state) => state?.data?.自定义循环列表)\n  const [可选循环列表, 设置可选循环列表] = useState<string[]>([])\n\n  useEffect(() => {\n    设置可选循环列表(自定义循环列表?.map((item) => item?.名称))\n  }, [自定义循环列表])\n\n  const 新增循环 = () => {\n    if (!新建循环标识) {\n      message.error('请输入循环唯一标识')\n      return\n    }\n    if (全部循环?.some((item) => item?.名称 === 新建循环标识)) {\n      message.error('和已存在循环唯一标识冲突，请更换标识')\n      return\n    }\n    if (可选循环列表?.includes(新建循环标识)) {\n      message.error('和已存在循环唯一标识冲突，请更换标识')\n      return\n    }\n    设置可选循环列表([...可选循环列表, 新建循环标识])\n    设置新建循环标识(undefined)\n  }\n\n  return (\n    <Select\n      style={{ width: '100%' }}\n      value={循环标识}\n      onChange={设置循环标识}\n      optionLabelProp='label'\n      placeholder={'请选择你要覆盖的循环'}\n      options={可选循环列表.map((item) => ({ label: item, value: item }))}\n      dropdownRender={(menu) => (\n        <>\n          {menu}\n          <Divider style={{ margin: '8px 0' }} />\n          <div className='cycle-select-add-input-wrap'>\n            <Input\n              placeholder='请输入循环标识'\n              value={新建循环标识}\n              onChange={(e) => 设置新建循环标识(e?.target?.value)}\n              onKeyDown={(e) => e.stopPropagation()}\n              onPressEnter={() => 新增循环()}\n            />\n            <Button type='text' icon={<PlusOutlined />} onClick={新增循环}>\n              创建新循环\n            </Button>\n          </div>\n        </>\n      )}\n    />\n  )\n}\n\nexport default CycleSelect\n","import React, { useState } from 'react'\nimport { Alert, message, Modal, ModalProps, Spin, Upload } from 'antd'\nimport { InboxOutlined } from '@ant-design/icons'\nimport { useAppDispatch, useAppSelector } from '@/hooks'\nimport { 循环数据 } from '@/@types/循环'\nimport { 更新当前自定义循环列表 } from '@/store/data'\nimport './index.css'\nimport CycleSelect from '@/组件/CycleSelect'\n\nconst { Dragger } = Upload\n\ninterface 导入弹窗类型 extends ModalProps {\n  a?: string\n}\n\nconst 导入弹窗: React.FC<导入弹窗类型> = (props) => {\n  const { open, onCancel } = props\n  const [loading, setLoading] = useState<boolean>(false)\n  const [导入数据, 设置导入数据] = useState<循环数据>()\n  const [循环标识, 设置循环标识] = useState<string>()\n  const dispatch = useAppDispatch()\n\n  const 自定义循环列表 = useAppSelector((state) => state?.data?.自定义循环列表)\n\n  const handleFileChange = (e) => {\n    const file = e\n    const reader = new FileReader()\n    setLoading(true)\n    reader.readAsText(file)\n    reader.onload = () => {\n      if (reader.result) {\n        try {\n          const data = JSON.parse(reader.result as any)\n          if (data?.名称) {\n            设置导入数据(data as any)\n          } else {\n            message.error('导入失败，请检查文件格式')\n          }\n        } catch (e) {\n          message.error('导入失败，请检查文件格式')\n        }\n      }\n      setLoading(false)\n    }\n  }\n\n  const 导入循环数据 = (e) => {\n    if (!循环标识) {\n      message.error('请选择/输入循环标识')\n      return\n    }\n    if (!导入数据) {\n      message.error('请导入文件')\n      return\n    }\n    const 新自定义循环 = 自定义循环列表?.some((item) => item?.名称 === 循环标识)\n      ? 自定义循环列表.map((item) => {\n          return item.名称 === 循环标识 ? 导入数据 : item\n        })\n      : (自定义循环列表 || []).concat([导入数据])\n\n    dispatch(更新当前自定义循环列表(新自定义循环))\n    message.success('导入成功')\n    onCancel?.(e as any)\n  }\n\n  return (\n    <Modal open={open} onCancel={onCancel} title='导入循环' onOk={导入循环数据}>\n      <Spin spinning={loading} tip='解析中'>\n        <div className='cycle-setting-import-select-wrap'>\n          <CycleSelect 循环标识={循环标识} 设置循环标识={设置循环标识} />\n        </div>\n        {导入数据?.名称 ? (\n          <div className={'cycle-setting-import-res'}>\n            <Alert\n              type='success'\n              message={`识别循环：${导入数据?.名称}`}\n              closable\n              afterClose={() => 设置导入数据(undefined)}\n            />\n          </div>\n        ) : (\n          <div>\n            <Dragger\n              name='file'\n              fileList={[]}\n              beforeUpload={(file) => {\n                handleFileChange(file)\n              }}\n              className={'tools-daoru-dragger'}\n            >\n              <p className='ant-upload-drag-icon'>\n                <InboxOutlined />\n              </p>\n              <p className='ant-upload-text'>点击上传或拖拽上传循环JSON文件</p>\n            </Dragger>\n          </div>\n        )}\n      </Spin>\n    </Modal>\n  )\n}\n\nexport default 导入弹窗\n","import React, { useEffect, useState } from 'react'\nimport { App, Button, message, Table } from 'antd'\nimport { useAppDispatch, useAppSelector } from '@/hooks'\nimport 获取当前数据 from '@/数据/数据工具/获取当前数据'\nimport useCycle from '@/hooks/use-cycle'\nimport { 更新当前自定义循环列表 } from '@/store/data'\nimport 导入弹窗 from './导入循环'\n// import { 循环数据 } from '@/@types/循环'\n// import 循环详情弹窗 from './循环详情弹窗'\nimport './index.css'\n\nconst { 缓存映射 } = 获取当前数据()\n\nfunction 循环设置() {\n  const { modal } = App.useApp()\n  const { 全部循环 = [] } = useCycle()\n  const [导入弹窗设置, 设置导入弹窗设置] = useState<boolean>(false)\n  // const [循环详情弹窗设置, 设置循环详情弹窗设置] = useState<{ open: boolean; 数据?: 循环数据 }>({\n  //   open: false,\n  // })\n  const 自定义循环列表 = useAppSelector((state) => state?.data?.自定义循环列表)\n  const dispatch = useAppDispatch()\n\n  const 导出循环 = (data) => {\n    const element = document.createElement('a')\n    element.setAttribute(\n      'href',\n      'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(data))\n    )\n    element.setAttribute('download', '计算器数据迁移.json')\n    element.style.display = 'none'\n    document.body.appendChild(element)\n    element.click()\n    document.body.removeChild(element)\n    message.success('循环已导出')\n  }\n\n  const 删除循环 = (循环数据) => {\n    modal.confirm({\n      title: `确定要删除循环${循环数据?.名称}吗？`,\n      content: '删除后将无法恢复',\n      onOk() {\n        const 新自定义循环 = 自定义循环列表?.filter((item) => item?.名称 !== 循环数据?.名称)\n        dispatch(更新当前自定义循环列表(新自定义循环))\n        message.success('删除成功')\n      },\n    })\n  }\n\n  useEffect(() => {\n    // redux变动，更新storage信息\n    const 保存信息 = {}\n    ;(自定义循环列表 || []).forEach((item) => {\n      保存信息[item.名称] = {\n        ...item,\n      }\n    })\n    localStorage?.setItem(缓存映射.自定义循环, JSON.stringify(保存信息))\n  }, [自定义循环列表])\n\n  return (\n    <div>\n      <div className='cycle-setting-btns'>\n        {/* <Button\n          className='cycle-setting-btn'\n          type='primary'\n          onClick={() => 设置循环详情弹窗设置({ open: true })}\n        >\n          新建循环\n        </Button> */}\n        <Button type='primary' className='cycle-setting-btn' onClick={() => 设置导入弹窗设置(true)}>\n          导入循环\n        </Button>\n      </div>\n      <导入弹窗 open={导入弹窗设置} onCancel={() => 设置导入弹窗设置(false)} />\n      {/* <循环详情弹窗\n        open={循环详情弹窗设置?.open}\n        数据={循环详情弹窗设置?.数据}\n        onCancel={() => 设置循环详情弹窗设置({ open: false })}\n      /> */}\n      <Table\n        dataSource={全部循环}\n        size='small'\n        pagination={false}\n        scroll={{ y: 500 }}\n        columns={[\n          {\n            title: '唯一标识',\n            dataIndex: '名称',\n          },\n          {\n            title: '循环标题',\n            dataIndex: '标题',\n            render: (_, row) => {\n              return row?.标题 || row?.名称\n            },\n          },\n          {\n            title: '提供者',\n            dataIndex: '提供者',\n          },\n          {\n            title: '类型',\n            dataIndex: '类型',\n            width: 80,\n          },\n          {\n            title: '标记',\n            dataIndex: '标记',\n            width: 80,\n          },\n          {\n            title: '操作',\n            dataIndex: '操作',\n            render: (_, row) => {\n              const 允许操作 = 自定义循环列表?.some((item) => item?.名称 === row?.名称)\n              return (\n                <div className='cycle-setting-list-btns'>\n                  <Button size='small' type='link' onClick={() => 导出循环(row)}>\n                    导出\n                  </Button>\n                  {允许操作 ? (\n                    <>\n                      {/* <Button\n                        size='small'\n                        type='link'\n                        onClick={() => 设置循环详情弹窗设置({ open: true, 数据: row })}\n                      >\n                        编辑\n                      </Button> */}\n                      <Button size='small' type='link' danger onClick={() => 删除循环(row)}>\n                        删除\n                      </Button>\n                    </>\n                  ) : null}\n                </div>\n              )\n            },\n          },\n        ]}\n      />\n    </div>\n  )\n}\n\nexport default 循环设置\n"],"names":["循环标识","设置循环标识","useCycle","全部循环","useState","新建循环标识","设置新建循环标识","自定义循环列表","useAppSelector","state","data","可选循环列表","设置可选循环列表","useEffect","map","item","名称","新增循环","some","includes","message","undefined","style","width","value","onChange","optionLabelProp","placeholder","options","label","dropdownRender","menu","margin","className","e","target","onKeyDown","stopPropagation","onPressEnter","type","icon","PlusOutlined","onClick","Dragger","Upload","props","open","onCancel","loading","setLoading","导入数据","设置导入数据","dispatch","useAppDispatch","title","onOk","新自定义循环","concat","更新当前自定义循环列表","spinning","tip","closable","afterClose","name","fileList","beforeUpload","file","reader","FileReader","readAsText","onload","result","JSON","parse","handleFileChange","InboxOutlined","缓存映射","获取当前数据","modal","App","导入弹窗设置","设置导入弹窗设置","保存信息","forEach","localStorage","setItem","自定义循环","stringify","dataSource","size","pagination","scroll","y","columns","dataIndex","render","_","row","标题","允许操作","element","document","createElement","setAttribute","encodeURIComponent","display","body","appendChild","click","removeChild","导出循环","danger","循环数据","confirm","content","filter"],"sourceRoot":""}